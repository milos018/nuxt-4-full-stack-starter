---
description: 
globs: 
alwaysApply: false
---
# Frontend Structure Conventions

## Directory Organization
The frontend code follows Nuxt 3's directory structure:

```
app/
├── app.vue                # App root component
├── components/           # Reusable components
├── composables/         # Shared composable functions
├── layouts/             # Page layouts
├── middleware/          # Navigation middleware
├── pages/               # Application routes
│   ├── app/            # Protected app pages
│   ├── auth/           # Authentication pages
│   └── index.vue       # Landing page
└── utils/              # Utility functions
```

## Component Organization
Components should be organized by feature or domain:

```
components/
├── auth/               # Authentication components
│   ├── LoginForm.vue
│   └── SignupForm.vue
├── common/            # Shared/common components
│   ├── Button.vue
│   └── Card.vue
└── resource/          # Resource-specific components
    ├── ResourceList.vue
    └── ResourceCard.vue
```

## Naming Conventions
- Components: PascalCase (e.g., `LoginForm.vue`)
- Pages: kebab-case (e.g., `user-profile.vue`)
- Composables: camelCase with use prefix (e.g., `useAuth.ts`)
- Utils: camelCase (e.g., `formatDate.ts`)

## Component Pattern
Each component should follow this structure:
```vue
<script setup lang="ts">
// 1. Type imports
import type { Resource } from '~/types'

// 2. Props and emits
const props = defineProps<{
  resource: Resource
}>()

const emit = defineEmits<{
  update: [resource: Resource]
}>()

// 3. Composables
const { user } = useAuth()

// 4. Reactive state
const isLoading = ref(false)

// 5. Computed properties
const displayName = computed(() => props.resource.name)

// 6. Methods
async function handleUpdate() {
  // Implementation
}
</script>

<template>
  <div>
    <!-- Component template -->
  </div>
</template>
```

## Page Pattern
Pages should follow this structure:
```vue
<script setup lang="ts">
// 1. Meta configuration
definePageMeta({
  layout: 'default',
  middleware: ['auth']
})

// 2. Page-specific logic
// 3. Data fetching
// 4. Error handling
</script>

<template>
  <div>
    <!-- Page content -->
  </div>
</template>
```

## Composable Pattern
Composables should be focused and reusable:
```typescript
export function useResource() {
  // 1. State
  const resources = ref([])
  const isLoading = ref(false)
  
  // 2. Methods
  async function fetchResources() {
    // Implementation
  }
  
  // 3. Return reactive state and methods
  return {
    resources,
    isLoading,
    fetchResources
  }
}
```

## Layout Pattern
Layouts should be minimal and focus on structure:
```vue
<script setup lang="ts">
// Minimal logic, focus on layout structure
</script>

<template>
  <div>
    <Header />
    <slot /> <!-- Page content -->
    <Footer />
  </div>
</template>
```

## State Management
Use Pinia for global state:
- One store per feature
- Keep stores minimal
- Use composables for complex logic
- Prefer local state when possible
